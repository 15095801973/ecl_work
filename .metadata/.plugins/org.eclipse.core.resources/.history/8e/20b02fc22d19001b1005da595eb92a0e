package IOC;

import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.web.bind.annotation.InitBinder;

import net.sf.cglib.proxy.MethodInterceptor;

public class myioc {

	public static HashMap<String, Object> beanFactory =new HashMap<String, Object>();
	public static HashMap<String, HashMap<String,String>> per =new HashMap<String, HashMap<String,String>>();
	public static void Init() {
		try {
			loadclasslist=load_file("src/main/resources/beans.xml");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Autowired();
	}
	
	public static void main(String[] args)  {
		try {
			HashMap<String, Class> loadclasslist = load_file("src/main/resources/beans.xml");
			System.out.println(loadclasslist);
			new_instance(loadclasslist);
			System.out.println(beanFactory);
			try {
				Autowired();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void new_instance(HashMap<String, Class> loadcasslist) {
		for(Map.Entry<String, Class> entry:loadcasslist.entrySet()) {
			try {
				beanFactory.put(entry.getKey(),entry.getValue().newInstance());
			} catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	public static HashMap<String, Class> load_file(String file) throws ClassNotFoundException {
		HashMap<String, Class> loadclazzlist = new HashMap<>();
		   //1.创建Reader对象
        SAXReader reader = new SAXReader();
        //2.加载xml
        Document document;
		try {
			document = reader.read(new File(file));
		
        //3.获取根节点
        Element rootElement = document.getRootElement();
        Iterator iterator = rootElement.elementIterator();
        while (iterator.hasNext()){
            Element stu = (Element) iterator.next();
            List<Attribute> attributes = stu.attributes();
            String id=null;
            System.out.println("======获取属性值======");
            for (Attribute attribute : attributes) {
            	
            	if(attribute.getName().equals("id"))
            	{
                    System.out.println("id:"+attribute.getValue());
                    id=attribute.getValue();
            	}
            	else if (attribute.getName().equals("class")) {
            		System.out.println("class:"+attribute.getValue());
            		//根据字符串加载类
            		Class<?> clazz=ClassLoader.getSystemClassLoader().loadClass(attribute.getValue());
            		Annotation[] annoList=clazz.getAnnotations();
            		System.out.println(annoList.length);
            		for(int i=0;i<annoList.length;i++) {
            			System.out.println(annoList[i].annotationType());
            			//只对有mycomponent注解的类初始化
            			if(annoList[i].annotationType()==mycomponent.class) {
            				System.out.println("put:"+id);
            		loadclazzlist.put(id, clazz);
            			}
            		}
				}
            }
        }
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return loadclazzlist;
	}

	public static void Autowired() throws IllegalArgumentException, IllegalAccessException{
		for(Map.Entry<String, Object> entry:beanFactory.entrySet()) {
//			Field[] fields=entry.getValue().getClass().getDeclaredFields();
//			System.out.println("all field: "+fields);
//			for(Field field:fields) {
//				Annotation[] annotations=field.getAnnotations();
//				for(Annotation anno:annotations) {
//					System.out.println("field type"+field.getType().getTypeName());
//					if(anno.annotationType()==myautowired.class) {
//						System.out.println("field: "+field.getType().getTypeName());
////						loadclasslist.get(field.getType().getTypeName());
//						field.setAccessible(true);
//						field.set(entry.getValue(), "value");
//					}
//				}
//			}
			Method[] methods=entry.getValue().getClass().getDeclaredMethods();
			for(Method method:methods) {
				System.out.println("methodName="+method.getName());
			}
		}
	}
}
